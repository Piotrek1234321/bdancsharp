using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;


class testAes{
   public static void Main(){
        Console.WriteLine("Success");
        testSuccessfull();
        Console.WriteLine("Invalid Cipher");
        invalidCipher();
        Console.WriteLine("Invalid Key");
        invalidKey();
   }
   static void testSuccessfull(){
              string original = read("C:\\Users\\piotr\\OneDrive\\Pulpit\\POLITECHNIKA\\BDAN\\csharp\\bdanProj\\Piotr_Stępniak.txt");
            using(Aes aes = Aes.Create()){
               
                aes.BlockSize = 128;
                aes.KeySize = 128;
                aes.GenerateKey();

                byte[] encrypted = EncryptStringToBytes_Aes(original,aes.Key,aes.IV);
                string decrypted = DecryptStringFromBytes_Aes(encrypted ,aes.Key ,aes.IV);
                
                foreach(byte b in encrypted){
                    Console.WriteLine(b);
                }

                Console.WriteLine(decrypted); 
        }
   }
   static void invalidCipher(){
        string original = read("C:\\Users\\piotr\\OneDrive\\Pulpit\\POLITECHNIKA\\BDAN\\csharp\\bdanProj\\Piotr_Stępniak.txt");
        
        using(Aes aes = Aes.Create()){
            aes.BlockSize = 128;
            aes.KeySize = 128;
            aes.GenerateKey();
            byte[] encrypted = EncryptStringToBytes_Aes(original,aes.Key,aes.IV);
            encrypted[0] = 12;
            string decrypted = DecryptStringFromBytes_Aes(encrypted ,aes.Key ,aes.IV);
            foreach(byte b in encrypted){
                Console.WriteLine(b);
            }
            Console.WriteLine(decrypted);
        }
   }
   static void invalidKey(){
        string original = read("C:\\Users\\piotr\\OneDrive\\Pulpit\\POLITECHNIKA\\BDAN\\csharp\\bdanProj\\Piotr_Stępniak.txt");
        
        using(Aes aes = Aes.Create()){
            aes.BlockSize = 128;
            aes.KeySize = 128;
            byte[] encrypted = EncryptStringToBytes_Aes(original,aes.Key,aes.IV);
            aes.GenerateKey();
            string decrypted = DecryptStringFromBytes_Aes(encrypted ,aes.Key ,aes.IV);
            foreach(byte b in encrypted){
                Console.WriteLine(b);
            }
            Console.WriteLine(decrypted);
        }
   }
   static string read(string path)
    {
        StringBuilder sb = new StringBuilder();
        using (StreamReader sr = new StreamReader(path))
        {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                sb.AppendLine(line);
            }
            return sb.ToString(); 
        }
    }

   static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
        {
            // Check arguments.
            if (plainText == null || plainText.Length <= 0)
                throw new ArgumentNullException("plainText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");
            byte[] encrypted;

           
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

              
                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);

             
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                           
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }

        
            return encrypted;
        }
         static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
        {
           
            if (cipherText == null || cipherText.Length <= 0)
                throw new ArgumentNullException("cipherText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("IV");

            string plaintext = null;

          
            using (Aes aesAlg = Aes.Create())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
            }

            return plaintext;
        }
    }
